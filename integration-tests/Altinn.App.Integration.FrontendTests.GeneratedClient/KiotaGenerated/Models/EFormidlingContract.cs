// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EFormidlingContract : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The dataTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DataTypes { get; set; }
#nullable restore
#else
        public List<string> DataTypes { get; set; }
#endif
        /// <summary>The dpfShipmentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DpfShipmentType { get; set; }
#nullable restore
#else
        public string DpfShipmentType { get; set; }
#endif
        /// <summary>The process property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Process { get; set; }
#nullable restore
#else
        public string Process { get; set; }
#endif
        /// <summary>The receiver property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Receiver { get; set; }
#nullable restore
#else
        public string Receiver { get; set; }
#endif
        /// <summary>The securityLevel property</summary>
        public int? SecurityLevel { get; set; }
        /// <summary>The sendAfterTaskId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SendAfterTaskId { get; set; }
#nullable restore
#else
        public string SendAfterTaskId { get; set; }
#endif
        /// <summary>The serviceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceId { get; set; }
#nullable restore
#else
        public string ServiceId { get; set; }
#endif
        /// <summary>The standard property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Standard { get; set; }
#nullable restore
#else
        public string Standard { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The typeVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TypeVersion { get; set; }
#nullable restore
#else
        public string TypeVersion { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.EFormidlingContract"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.EFormidlingContract CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.EFormidlingContract();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dataTypes", n => { DataTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "dpfShipmentType", n => { DpfShipmentType = n.GetStringValue(); } },
                { "process", n => { Process = n.GetStringValue(); } },
                { "receiver", n => { Receiver = n.GetStringValue(); } },
                { "securityLevel", n => { SecurityLevel = n.GetIntValue(); } },
                { "sendAfterTaskId", n => { SendAfterTaskId = n.GetStringValue(); } },
                { "serviceId", n => { ServiceId = n.GetStringValue(); } },
                { "standard", n => { Standard = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "typeVersion", n => { TypeVersion = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("dataTypes", DataTypes);
            writer.WriteStringValue("dpfShipmentType", DpfShipmentType);
            writer.WriteStringValue("process", Process);
            writer.WriteStringValue("receiver", Receiver);
            writer.WriteIntValue("securityLevel", SecurityLevel);
            writer.WriteStringValue("sendAfterTaskId", SendAfterTaskId);
            writer.WriteStringValue("serviceId", ServiceId);
            writer.WriteStringValue("standard", Standard);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("typeVersion", TypeVersion);
        }
    }
}
#pragma warning restore CS0618

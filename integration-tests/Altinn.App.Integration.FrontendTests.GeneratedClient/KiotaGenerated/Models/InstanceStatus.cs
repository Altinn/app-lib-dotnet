// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InstanceStatus : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The archived property</summary>
        public DateTimeOffset? Archived { get; set; }
        /// <summary>The hardDeleted property</summary>
        public DateTimeOffset? HardDeleted { get; set; }
        /// <summary>The isArchived property</summary>
        public bool? IsArchived { get; set; }
        /// <summary>The isHardDeleted property</summary>
        public bool? IsHardDeleted { get; set; }
        /// <summary>The isSoftDeleted property</summary>
        public bool? IsSoftDeleted { get; set; }
        /// <summary>The readStatus property</summary>
        public int? ReadStatus { get; set; }
        /// <summary>The softDeleted property</summary>
        public DateTimeOffset? SoftDeleted { get; set; }
        /// <summary>The substatus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Substatus? Substatus { get; set; }
#nullable restore
#else
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Substatus Substatus { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.InstanceStatus"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.InstanceStatus CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.InstanceStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "archived", n => { Archived = n.GetDateTimeOffsetValue(); } },
                { "hardDeleted", n => { HardDeleted = n.GetDateTimeOffsetValue(); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "isHardDeleted", n => { IsHardDeleted = n.GetBoolValue(); } },
                { "isSoftDeleted", n => { IsSoftDeleted = n.GetBoolValue(); } },
                { "readStatus", n => { ReadStatus = n.GetIntValue(); } },
                { "softDeleted", n => { SoftDeleted = n.GetDateTimeOffsetValue(); } },
                { "substatus", n => { Substatus = n.GetObjectValue<global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Substatus>(global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Substatus.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("archived", Archived);
            writer.WriteDateTimeOffsetValue("hardDeleted", HardDeleted);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteBoolValue("isHardDeleted", IsHardDeleted);
            writer.WriteBoolValue("isSoftDeleted", IsSoftDeleted);
            writer.WriteIntValue("readStatus", ReadStatus);
            writer.WriteDateTimeOffsetValue("softDeleted", SoftDeleted);
            writer.WriteObjectValue<global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Substatus>("substatus", Substatus);
        }
    }
}
#pragma warning restore CS0618

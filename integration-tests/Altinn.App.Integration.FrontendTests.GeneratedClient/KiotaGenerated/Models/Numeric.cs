// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Numeric : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Decimal property</summary>
        public double? Decimal { get; set; }
        /// <summary>The Int16 property</summary>
        public int? Int16 { get; set; }
        /// <summary>The Int32 property</summary>
        public int? Int32 { get; set; }
        /// <summary>The Int64 property</summary>
        public long? Int64 { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Numeric"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Numeric CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Models.Numeric();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Decimal", n => { Decimal = n.GetDoubleValue(); } },
                { "Int16", n => { Int16 = n.GetIntValue(); } },
                { "Int32", n => { Int32 = n.GetIntValue(); } },
                { "Int64", n => { Int64 = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("Decimal", Decimal);
            writer.WriteIntValue("Int16", Int16);
            writer.WriteIntValue("Int32", Int32);
            writer.WriteLongValue("Int64", Int64);
        }
    }
}
#pragma warning restore CS0618

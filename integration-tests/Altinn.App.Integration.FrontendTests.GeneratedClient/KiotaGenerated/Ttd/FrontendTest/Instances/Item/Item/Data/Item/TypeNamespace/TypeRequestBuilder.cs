// <auto-generated/>
#pragma warning disable CS0618
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Datalist;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadChangename;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadMessage;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadWithTagsChangename;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Likert;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderMulti;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderSingle;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Message;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.NestedGroup;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.RefDataAsPdf;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.ServiceModelTest;
using Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.SubUploader;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace
{
    /// <summary>
    /// Builds and executes requests for operations under \ttd\frontend-test\instances\{instanceOwnerPartyId}\{instanceGuid}\data\{dataGuid}\type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TypeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>CRUD operations for data of type datalist</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Datalist.DatalistRequestBuilder Datalist
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Datalist.DatalistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type fileUpload-changename</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadChangename.FileUploadChangenameRequestBuilder FileUploadChangename
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadChangename.FileUploadChangenameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type fileUpload-message</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadMessage.FileUploadMessageRequestBuilder FileUploadMessage
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadMessage.FileUploadMessageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type fileUploadWithTags-changename</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadWithTagsChangename.FileUploadWithTagsChangenameRequestBuilder FileUploadWithTagsChangename
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.FileUploadWithTagsChangename.FileUploadWithTagsChangenameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type likert</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Likert.LikertRequestBuilder Likert
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Likert.LikertRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type mainUploaderMulti</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderMulti.MainUploaderMultiRequestBuilder MainUploaderMulti
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderMulti.MainUploaderMultiRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type mainUploaderSingle</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderSingle.MainUploaderSingleRequestBuilder MainUploaderSingle
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.MainUploaderSingle.MainUploaderSingleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type message</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Message.MessageRequestBuilder Message
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.Message.MessageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type nested-group</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.NestedGroup.NestedGroupRequestBuilder NestedGroup
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.NestedGroup.NestedGroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type ref-data-as-pdf</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.RefDataAsPdf.RefDataAsPdfRequestBuilder RefDataAsPdf
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.RefDataAsPdf.RefDataAsPdfRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type ServiceModel-test</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.ServiceModelTest.ServiceModelTestRequestBuilder ServiceModelTest
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.ServiceModelTest.ServiceModelTestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>CRUD operations for data of type subUploader</summary>
        public global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.SubUploader.SubUploaderRequestBuilder SubUploader
        {
            get => new global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.SubUploader.SubUploaderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.TypeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ttd/frontend-test/instances/{instanceOwnerPartyId}/{instanceGuid}/data/{dataGuid}/type", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Altinn.App.Integration.FrontendTests.GeneratedClient.KiotaGenerated.Ttd.FrontendTest.Instances.Item.Item.Data.Item.TypeNamespace.TypeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TypeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ttd/frontend-test/instances/{instanceOwnerPartyId}/{instanceGuid}/data/{dataGuid}/type", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

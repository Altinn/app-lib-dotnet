// <auto-generated/>
using System;
using Microsoft.Extensions.Logging;
using Altinn.App.Core.Internal.AppModel;

namespace Altinn.App.Core.Implementation;

/// <inheritdoc />
public class AppModel : IAppModel
{
    private readonly ILogger<AppModel> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="AppModel"/> class.
    /// </summary>
    public AppModel(ILogger<AppModel> logger)
    {
        _logger = logger;
    }

    /// <inheritdoc />
    public object Create(string classRef)
    {
        _logger.LogInformation($"CreateNewAppModel {classRef}");

        return Activator.CreateInstance(GetModelType(classRef));
    }

    /// <inheritdoc />
    public Type GetModelType(string classRef)
    {
        _logger.LogInformation($"GetAppModelType {classRef}");
        if (_typeCache.TryGetValue(classRef, out var type))
        {
            return type;
        }
        lock (_typeCache)
        {
            if (_typeCache.TryGetValue(classRef, out type))
            {
                return type;
            }
            var types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x=>x.GetTypes());
            // var atypes = types.Where(t=>t.FullName.StartsWith("Altinn.App"));
            type = types.First(t=>t.FullName == classRef);
            _typeCache.Add(classRef, type);
            return type;
        }
    }

    private static Dictionary<string, Type> _typeCache = new();
}
